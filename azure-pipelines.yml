# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
  branches:
    include:
    - main

stages:

# Terraform Validate

- stage: Validate
  displayName: Validate
  jobs:
  - job: Validate
    pool:
      vmImage: ubuntu-latest
    steps:
    - task: TerraformInstaller@1
      inputs:
        terraformVersion: 'latest'

# Terraform Initialise

- stage: Init
  displayName: Initialise
  jobs:
  - job: Init
    pool:
      vmImage: ubuntu-latest
    steps:
    - task: TerraformInstaller@1
      inputs:
        terraformVersion: 'latest'
    - task: TerraformTask@5
      inputs:
        provider: 'azurerm'
        command: 'init'
        workingDirectory: 'terraform-azurerm-vnet-main/terraform-azurerm-vnet-main/terraform-azurerm-vnet-main'
        commandOptions: '-upgrade'
        backendServiceArm: 'ARMConnection'
        backendAzureRmResourceGroupName: 'rg-devops-001'
        backendAzureRmStorageAccountName: 'jccloudtfstate'
        backendAzureRmContainerName: 'tfstatefile'
        backendAzureRmKey: 'app.terraform.tfstate'

# Terraform Plan

- stage: Plan
  displayName: Plan
  jobs:
  - job: Plan
    pool:
      vmImage: ubuntu-latest
    steps:
    - task: TerraformInstaller@1
      inputs:
        terraformVersion: 'latest'
    - task: TerraformTask@5
      inputs:
        provider: 'azurerm'
        command: 'init'
        workingDirectory: 'terraform-azurerm-vnet-main/terraform-azurerm-vnet-main/terraform-azurerm-vnet-main'
        commandOptions: '-upgrade'
        backendServiceArm: 'ARMConnection'
        backendAzureRmResourceGroupName: 'rg-devops-001'
        backendAzureRmStorageAccountName: 'jccloudtfstate'
        backendAzureRmContainerName: 'tfstatefile'
        backendAzureRmKey: 'app.terraform.tfstate'
    - task: TerraformTask@5
      inputs:
        provider: 'azurerm'
        command: 'plan'
        workingDirectory: 'terraform-azurerm-vnet-main/terraform-azurerm-vnet-main/terraform-azurerm-vnet-main'
        environmentServiceNameAzureRM: 'ARMConnection'

# Terraform Apply

- stage: Apply
  displayName: Apply
  jobs:
  - job: Apply
    pool:
      vmImage: ubuntu-latest
    steps:
    - task: TerraformInstaller@1
      inputs:
        terraformVersion: 'latest'
    - task: TerraformTask@5
      inputs:
        provider: 'azurerm'
        command: 'init'
        workingDirectory: 'terraform-azurerm-vnet-main/terraform-azurerm-vnet-main/terraform-azurerm-vnet-main'
        commandOptions: '-upgrade'
        backendServiceArm: 'ARMConnection'
        backendAzureRmResourceGroupName: 'rg-devops-001'
        backendAzureRmStorageAccountName: 'jccloudtfstate'
        backendAzureRmContainerName: 'tfstatefile'
        backendAzureRmKey: 'app.terraform.tfstate'
    - task: TerraformTask@5
      inputs:
        provider: 'azurerm'
        command: 'apply'
        workingDirectory: 'terraform-azurerm-vnet-main/terraform-azurerm-vnet-main/terraform-azurerm-vnet-main'
        commandOptions: '-auto-approve'
        environmentServiceNameAzureRM: 'ARMConnection'

